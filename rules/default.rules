import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.lang.Double
import org.joda.time.*
import org.openhab.model.script.actions.Timer
import org.openhab.core.types.*

var Number counter = 1
var Timer heaterTimer = null


/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
 * and posting an updated state on the bus 
 */
//rule "Dimmed Light"
//	when
//		Item DimmedLight received command
//	then
//		var Number percent = 0
//		if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType 
//			
//		if(receivedCommand==INCREASE) percent = percent + 5
//		if(receivedCommand==DECREASE) percent = percent - 5
//
//		if(percent<0)   percent = 0
//		if(percent>100) percent = 100
//		postUpdate(DimmedLight, percent);
//end

/**
 * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
 * A selection widget in the UI provides easy access for this
 */
//rule "Select Radio Station"
//	when
//		Item Radio_Station received command
//	then
//		switch(receivedCommand) {
//			case 0 : playStream(null)
//			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
//			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
//			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
//		}
//end

/**
 * This rules controls the volume on the local host
 */
//rule "Volume control"
//	when
//		Item Volume received command
//	then
//		if(receivedCommand instanceof PercentType) {
//			setMasterVolume(receivedCommand as PercentType)
//		} else {
//			if(receivedCommand==INCREASE) increaseMasterVolume(20)
//			if(receivedCommand==DECREASE) decreaseMasterVolume(20)	
//		}
//		postUpdate(Volume, masterVolume * 100)
//end

/**
 * The following rules help initializing the demo items with some helpful states.
 */
//rule "Initialize light states"
//	when
//		System started
//	then
//		Lights?.members.forEach(light|
//			postUpdate(light, if(Math::random > 0.7) ON else OFF)
//		)
//end

//rule "Initialize heating states"
//	when 
//		System started
//	then
//		Heating?.members.forEach(heating|
//			postUpdate(heating, if(Math::random > 0.8) ON else OFF)
//		)
//		postUpdate(Temperature_Setpoint, 22)
//end

//rule "Initialize contact states"
//	when 
//		System started
//	then
//		Windows?.members.forEach(window|
//			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
//		)
//end

//rule "Initialize Location"
//	when 
//		System started
//	then
//		DemoLocation.postUpdate(new PointType("52.5200066,13.4049540"))
//end

//rule "Set random room temperatures"
//	when 
//		System started or
//		Time cron "0 0/5 * * * ?"
//	then
//		Temperature?.members.forEach(temperature|
//			postUpdate(temperature, 20.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
//		)
//end


rule "Temp trigger"
when
	Time cron "0 */15 * * * ?" or
	System started
then
	Sensor.sendCommand("aAABATT-----")
	Sensor.sendCommand("aABBATT-----")
	Sensor.sendCommand("aACBATT-----")
	Sensor.sendCommand("aADBATT-----")
end

rule "Zwave Update"
when
	Item Node_2_Temp received update
then 
	postUpdate(Node_2_Temp_LastUpdate, new DateTimeType())
end

rule "Zwave Update"
when
	Item Node_3_Temp received update
then 
	postUpdate(Node_3_Temp_LastUpdate, new DateTimeType())
end

rule "Zwave Update"
when
	Item Node_9_Temp received update
then 
	postUpdate(Node_9_Temp_LastUpdate, new DateTimeType())
end

rule "Zwave Update"
when
	Item Node_10_Temp received update
then 
	postUpdate(Node_10_Temp_LastUpdate, new DateTimeType())
end

rule "Temp Update"
when
    Item Sensor received update
then
	var SensorUpdate = Sensor.state.toString.trim.split("a")
	SensorUpdate.forEach[message|
		if (message.length() > 0){
			logInfo("Sensor", "Sensor update: " + message)
		}
		if (message.contains("AWAKE")) {
			var id = message.substring(0, 2)
			logInfo("Sensor", "Sensor " + id + " is awake")
			var temperatureCommand = "a" + id + "TEMP-----"
			Sensor.sendCommand(temperatureCommand)
			var batteryCommand = "a" + id + "BATT-----"
			Sensor.sendCommand(batteryCommand)
		} else if (message.contains("TEMP") && !message.contains('-')){
			var String tempStr = message.substring(6)
			var temp = new Double(tempStr)
			logInfo("Sensor", "Temperature measurement " + temp)
			var id = message.substring(0, 2)
			if (temp < 100) {			
				if (id.equals("AA")){
					Sensor_AA.postUpdate(temp)
					postUpdate(Sensor_LastUpdate_AA, new DateTimeType())
				} else if (id.equals("AB")){
					Sensor_AB.postUpdate(temp)
					postUpdate(Sensor_LastUpdate_AB, new DateTimeType())
				} else if (id.equals("AC")){
					Sensor_AC.postUpdate(temp)				
					postUpdate(Sensor_LastUpdate_AC, new DateTimeType())	
				} else if (id.equals("AD")){
					Sensor_AD.postUpdate(temp)				
					postUpdate(Sensor_LastUpdate_AD, new DateTimeType())
				}
			}			
		} else if (message.contains("BATT") && message.contains('-')){
			var String battStr = message.substring(6, 10)
			var batt = new Double(battStr)
			logInfo("Sensor", "Battery status " + batt)
			var id = message.substring(0, 2)
			if (batt < 20) {			
				if (id.equals("AA")){
					Sensor_AA_BT.postUpdate(batt)					
				} else if (id.equals("AB")){
					Sensor_AB_BT.postUpdate(batt)
				} else if (id.equals("AC")){
					Sensor_AC_BT.postUpdate(batt)				
				} else if (id.equals("AD")){
					Sensor_AD_BT.postUpdate(batt)				
				}
			}			
			var sleepCommand = "a" + id + "SLEEP" + "015M"
			Sensor.sendCommand(sleepCommand)						
		} else if (message.contains("BATTLOW")) {
			var id = message.substring(0, 2)
			logInfo("Sensor", "Sensor " + id + " battery is low.")
			if (id.equals("AA")){
				Sensor_AA_BT.postUpdate(0)
			} else if (id.equals("AB")){
				Sensor_AB_BT.postUpdate(0)
			} else if (id.equals("AC")){
				Sensor_AC_BT.postUpdate(0)
			} else if (id.equals("AD")){
				Sensor_AD_BT.postUpdate(0)
			}
			var sleepCommand = "a" + id + "SLEEP" + "015M"
			Sensor.sendCommand(sleepCommand)	
		}
	]
end

rule "Motion with Sensor_1 detected"
when
	Item Sensor_Driveway_PIR changed from CLOSED to OPEN
then
	sendCommand(Light_LR_Bulb1, OFF)
end

rule "Motion with Sensor_1 detected"
when
	Item Sensor_Driveway_PIR changed from OPEN to CLOSED
then
	sendCommand(Light_LR_Bulb1, ON)
end

rule "Update max and min temperatures"
when
	Item Weather_Temperature changed or
	Time cron "0 0 0 * * ?" or
	System started
then	
	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
	logInfo("Weather", "Temperature evolved of " + Weather_Temperature.deltaSince(now.minusMinutes(2)) + " degrees.")
end

rule "Turn off heating if temperature stabilises"
when
	Time cron "0 */1 * * * ?"
then
	if(BR_Heating.state == ON){
		val tempChangeBR = Node_3_Temp.deltaSince(now.minusMinutes(15))
		logInfo("Heating", "Temperature in BR evolved of " + tempChangeBR + " degrees.")
		postUpdate(Bedroom_Change, tempChangeBR)
	} 
	if(LR_Heating.state == ON){
		val tempChangeLR = Node_2_Temp.deltaSince(now.minusMinutes(15))
		logInfo("Heating", "Temperature in LR evolved of " + tempChangeLR + " degrees.")
		postUpdate(Livingroom_Change, tempChangeLR)
	}
end


/** shows how to use sensor values from the past */
rule "Persistence Demo"
when
	Time cron "0 * * * * ?"
then	
	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {
		logInfo("PersistenceDemo", "2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")
	}
end

rule "Set heating LR"
when
	Item LR_Heating received command
	then
		switch(receivedCommand) {
			case ON : {
				sendCommand(Boiler_Switch, ON)
				sendCommand(LR_Radiator_Door_HS, "22")
				sendCommand(LR_Radiator_Window_HS, "22")	
			}
			case OFF : {
				sendCommand(LR_Radiator_Door_HS, "5")
				sendCommand(LR_Radiator_Window_HS, "5")
				if (BR_Heating.state == OFF && GR_Heating.state == OFF){
					sendCommand(Boiler_Switch, OFF)
				}
			}	
		}
end

rule "Set heating BR"
when
	Item BR_Heating received command
	then
		switch(receivedCommand) {
			case ON : {
				sendCommand(Boiler_Switch, ON)
				sendCommand(BR_Radiator_HS, "22")	
			}
			case OFF : {
				sendCommand(BR_Radiator_HS, "5")
				if (LR_Heating.state == OFF && GR_Heating.state == OFF){
					sendCommand(Boiler_Switch, OFF)
				}
			}	
		}
end		

rule "Set heating GR"
when
	Item GR_Heating received command
	then
		switch(receivedCommand) {
			case ON : {
				sendCommand(Boiler_Switch, ON)
				sendCommand(GR_Radiator_HS, "22")
			}
			case OFF : {
				sendCommand(GR_Radiator_HS, "5")
				if (LR_Heating.state == OFF && BR_Heating.state == OFF){
					sendCommand(Boiler_Switch, OFF)
				}
			}	
		}
end

rule "Set heating ALL"
when
	Item ALL_Heating received command
	then
		switch(receivedCommand) {
			case ON : {
				sendCommand(LR_Heating, ON)
				sendCommand(GR_Heating, ON)
				sendCommand(BR_Heating, ON)				
			}
			case OFF : {
				sendCommand(LR_Heating, OFF)
				sendCommand(GR_Heating, OFF)
				sendCommand(BR_Heating, OFF)	
				}
		}	
end

rule "Set mood"
when  
	Item Bedroom_Moods received command
	then
		switch(receivedCommand) {
			case 0 : {	sendCommand(Light_LR_Bulb5_CT, "0,100.0,100.0");
					 	sendCommand(Light_LR_Bulb6_CT, "0,100.0,100.0");
						sendCommand(Light_LR_Bulb5_BR, "10");
					 	sendCommand(Light_LR_Bulb6_BR, "10");
					 	}
		}
end


rule "Set mood"
when  
	Item Livingroom_Moods received command
	then
		switch(receivedCommand) {
			case 0 : {	sendCommand(Light_LR_Bulb1, "ON");
					 	sendCommand(Light_LR_Bulb2, "ON");
					 	sendCommand(Light_LR_Bulb3, "ON");
					 	sendCommand(Light_LR_Bulb3, "ON");	
					 	sendCommand(Light_LR_Kitchen, "ON");
					 	sendCommand(Light_LR_Bulb1_BR, "100");
					 	sendCommand(Light_LR_Bulb2_BR, "100");
					 	sendCommand(Light_LR_Bulb3_BR, "100");
					 	sendCommand(Light_LR_Bulb4_BR, "100");
					 	}
		    case 1 : {	sendCommand(Light_LR_Bulb1, "OFF");
					 	sendCommand(Light_LR_Bulb2, "OFF");
					 	sendCommand(Light_LR_Bulb3_BR, "15");
					 	sendCommand(Light_LR_Bulb4_BR, "15");
					 	sendCommand(Light_LR_Bulb3_CT, "132,75,40");
					 	sendCommand(Light_LR_Bulb4_CT, "132,75,40")
					 	}
		   case 2 : {
		   				sendCommand(Light_LR_Bulb1_BR, "8");
					 	sendCommand(Light_LR_Bulb2_BR, "8");
					 	sendCommand(Light_LR_Bulb3_W, "ON");
					 	sendCommand(Light_LR_Bulb4_W, "ON");
					 	sendCommand(Light_LR_Bulb3_BR, "15");
					 	sendCommand(Light_LR_Bulb4_BR, "15");
					 	sendCommand(Light_LR_Kitchen, "OFF");
					 	sendCommand(Light_LR_Bar, "OFF");
		   }
		}
end

rule "Living Room Motion Last On"
when
	Item Node_2_Motion received update OPEN
	then
		postUpdate(LR_Motion_On_LastUpdate, new DateTimeType())
end

rule "Turn Sunset timer on"
when 
    Time cron "0 0 15 * * ?"   // Every day 15:00 hours, enable checking
then
	SunsetTimer.postUpdate(ON)
end


rule "Lights On At Sunset"
when
	Item Node_2_Lum received update
then 
	if (SunsetTimer.state == ON){
	        var year   = now.getYear
	        var month  = now.getMonthOfYear
	        var day    = now.getDayOfMonth
	        var datum  = year+"-"+month+"-"+day+" "+strSunset.state
	        logInfo("Sunset","datum = " + datum)
	        val DateTime sunset = parse(year+"-"+month+"-"+day+"T"+strSunset.state)
			val DateTime sunsetMinus40mins = sunset.minusMinutes(40)
			val DateTime sunsetPlus40mins = sunset.plusMinutes(40)
		
	        if (now.isAfter(sunsetMinus40mins) && now.isBefore(sunsetPlus40mins) && Node_2_Lum.state < 5){
	        	//Check if there is someone in the room
	        	val DateTime lastUpdate = new DateTime((LR_Motion_On_LastUpdate.state as DateTimeType).calendar.timeInMillis)
	        	if (lastUpdate.isAfter(now.minusMinutes(20))){
	        		logInfo("Sunset","First timer IndoorLights executed") 
	        		sendCommand(Light_LR_Kitchen_D, "40") 
					sendCommand(Light_LR_Kitchen, "ON")
					//No more light switching today
					SunsetTimer.postUpdate(OFF)
//					tIndoorLightsSecond = createTimer(now.plusMinutes(60)) [|
//	        			logInfo("Sunset","Second timer IndoorLights executed") 
//						sendCommand(Light_LR_Kitchen_D, "80") 
//						sendCommand(Light_LR_Kitchen, "ON")]
				} else {
					SunsetTimer.postUpdate(OFF)
					logInfo("Sunset", "Tried timer but no one in the room")
				}
	        }
        }
end

rule "Temperature summary"
when
    Item Sensor_AA changed
    or Item Sensor_AB changed
    or Item Sensor_AC changed
then
    Temp_combined.postUpdate(Sensor_AA.state.format("%.1f") + " °C/ " + Sensor_AB.state.format("%.1f") + " °C/ " + Sensor_AC.state.format("%.1f") + " °C")
end

rule "Heater Timer Update"
    when
        Item Timer_Switch received command ON
    then
        var int minutes = (Timer_Mins.state as DecimalType).intValue()
        val String heatingState = Heating_On_Off.state.toString
        
        if (Heating_On_Off.state == Uninitialized)   {      
        	sendBroadcastNotification("Turn heating OFF/ON switch is uninitialized")
        } else {
        
	        logInfo("Heating Timer", "Setting a timer to turn the heating " + heatingState + " in " + minutes + " minutes")
	        logInfo("Heating Timer", "Living room switch state " + Timer_LR.state.toString)
	        logInfo("Heating Timer", "Bedroom switch state " + Timer_BR.state.toString)
	        logInfo("Heating Timer", "Guest room switch state " + Timer_GR.state.toString)        
	                
	        if (heaterTimer != null)
	            heaterTimer.cancel()
	        
	        var DateTime alarmTime = now.plusMinutes(minutes)
	        
	        heaterTimer = createTimer(alarmTime) [|             
	        	if (Timer_LR.state == ON){
	        		LR_Heating.sendCommand(Heating_On_Off.state.toString)
	        	}
	        	if (Timer_BR.state == ON){
	        		BR_Heating.sendCommand(Heating_On_Off.state.toString)
	        	}
	        	if (Timer_GR.state == ON){
	        		GR_Heating.sendCommand(Heating_On_Off.state.toString)
	        	}
	            Timer_Switch.sendCommand(OFF)
	        ]
        }
	end

/** 
 * shows how to check recent switch states - very helpful to avoid executing something too often, just
 * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)
 */
//rule "Persistence Demo 2"
//when
//	Item DemoSwitch received command
//then
//	if(!DemoSwitch.changedSince(now.minusSeconds(5))) {
//		logInfo("PersistenceDemo2", "You did not press this button during the last 5 seconds!")
//	}
//end

//rule "Timer Demo"
//when
//	Item Light_GF_Corridor_Ceiling received command
//then
//	if(receivedCommand==ON) {
//		if(timer==null) {
//			// first ON command, so create a timer to turn the light off again
//			timer = createTimer(now.plusSeconds(10)) [|
//				sendCommand(Light_GF_Corridor_Ceiling, OFF)
//			]
//		} else {
//			// subsequent ON command, so reschedule the existing timer
//			timer.reschedule(now.plusSeconds(10))
//		}
//	} else if(receivedCommand==OFF) {
//		// remove any previously scheduled timer
//		if(timer!=null) {
//			timer.cancel
//			timer = null
//		}	
//	}
//end

// Creates an item that stores the last update time of this item
rule "Records last weather update time"
when
  Item Weather_Temperature received update
then
  postUpdate(Weather_LastUpdate, new DateTimeType())
end

// This rule will be used to test Scale transformation service
rule "Compute humidex"
when
    Item Weather_Temperature changed or
	Item Weather_Humidity changed
then
	var Number T = Weather_Temperature.state as DecimalType
	var Number H = Weather_Humidity.state as DecimalType	
	var Number x = 7.5 * T/(237.7 + T)
	var Number e = 6.112 * Math::pow(10, x.doubleValue) * H/100
	var Number humidex = T + (new Double(5) / new Double(9)) * (e - 10)
	postUpdate(Weather_Humidex, humidex)
end

rule "Voice command test"
when
    Item VoiceCommand received command
then
	var String command = VoiceCommand.state.toString.toLowerCase
	logInfo("Voice.Rec","VoiceCommand received "+command)
	var State newState = null
	if (command.contains("off")) {
		newState = OFF
	} else if (command.contains("on")) {
		newState = ON
	}
	
	var String room = null
	if (command.contains("living room")) {
		room = "LR"
	} else if (command.contains("bedroom")) {
		room = "BR"
	}
	
	var String item = null
	if (command.contains("lights") || command.contains("light")) {
		item = 'Lights'
	}
	
	if (newState != null && room != null){
		sendCommand(item+"_"+room, newState.toString)
	}
	
end




